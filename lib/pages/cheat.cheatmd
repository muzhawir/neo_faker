# Cheat Sheet

A quick reference for common random generator functions in NeoFaker.

## [App](`NeoFaker.App`)

{: .col-2}

### [`author()`](`NeoFaker.App.author/0`)

```elixir
iex> NeoFaker.App.author()
"JosÃ© Valim"
```

### [`description()`](`NeoFaker.App.description/0`)

```elixir
iex> NeoFaker.App.description()
"Elixir library for generating fake data in tests and development."
```

### [`license()`](`NeoFaker.App.license/0`)

```elixir
iex> NeoFaker.App.license()
"MIT License"
```

### [`name(opts \\ [])`](`NeoFaker.App.name/1`)

```elixir
iex> NeoFaker.App.name()
"Neo Faker"

iex> NeoFaker.App.name(style: :camel_case)
"neoFaker"
```

### [`semver(opts \\ [])`](`NeoFaker.App.semver/1`)

```elixir
iex> NeoFaker.App.semver()
"1.2.3"

iex> NeoFaker.App.semver(type: :pre_release)
"1.2.3-beta.1"
```

### [`version()`](`NeoFaker.App.version/0`)

```elixir
iex> NeoFaker.App.version()
"1.2"
```

## [Blood](`NeoFaker.Blood`)

{: .col-2}

### [`group()`](`NeoFaker.Blood.group/0`)

```elixir
iex> NeoFaker.Blood.group()
"B+"
```

### [`type()`](`NeoFaker.Blood.type/0`)

```elixir
iex> NeoFaker.Blood.type()
"B"
```

## [Boolean](`NeoFaker.Boolean`)

{: .col-1}

### [`boolean(true_ratio \\ 50, opts \\ [])`](`NeoFaker.Boolean.boolean/2`)

```elixir
iex> NeoFaker.Boolean.boolean()
false

iex> NeoFaker.Boolean.boolean(75)
true

iex> NeoFaker.Boolean.boolean(75, integer: true)
1
```

## [Crypto](`NeoFaker.Crypto`)

{: .col-2}

### [`md5(opts \\ [])`](`NeoFaker.Crypto.md5/1`)

```elixir
iex> NeoFaker.Crypto.md5()
"e35cb102765cfc56df21ba4c16e6a636"

iex> NeoFaker.Crypto.md5(case: :upper)
"E35CB102765CFC56DF21BA4C16E6A636"
```

### [`sha1(opts \\ [])`](`NeoFaker.Crypto.sha1/1`)

```elixir
iex> NeoFaker.Crypto.sha1()
"c8719790cdfff41c37c75e0c848d2b57535255aa"

iex> NeoFaker.Crypto.sha1(case: :upper)
"C8719790CDFFF41C37C75E0C848D2B57535255AA"
```

### [`sha256(opts \\ [])`](`NeoFaker.Crypto.sha256/1`)

```elixir
iex> NeoFaker.Crypto.sha256()
"d0ff021e810fb8f3442a14393604b0661b02f0dfcb347d80c9580af3ab5e7e6c"

iex> NeoFaker.Crypto.sha256(case: :upper)
"D0FF021E810FB8F3442A14393604B0661B02F0DFCB347D80C9580AF3AB5E7E6C"
```

## [Gravatar](`NeoFaker.Gravatar`)

{: .col-1}

### [`display(email \\ nil, opts \\ [])`](`NeoFaker.Gravatar.display/2`)

```elixir
iex> NeoFaker.Gravatar.display()
"https://gravatar.com/avatar/<hashed_email>?d=identicon&s=80"

iex> NeoFaker.Gravatar.display("john.doe@example.com", fallback: :monsterid)
"https://gravatar.com/avatar/<hashed_email>?d=monsterid&s=80"
```

## [Person](`NeoFaker.Person`)

{: .col-2}

### [`age(min \\ 0, max \\ 120)`](`NeoFaker.Person.age/2`)

```elixir
iex> NeoFaker.Person.age()
44

iex> NeoFaker.Person.age(7..44)
27
```

### [`binary_gender()`](`NeoFaker.Person.binary_gender/0`)

```elixir
iex> NeoFaker.Person.binary_gender()
"Male"
```

### [`first_name(opts \\ [])`](`NeoFaker.Person.first_name/1`)

```elixir
iex> NeoFaker.Person.first_name()
"Tiffany"

iex> NeoFaker.Person.first_name(type: :masculine)
"Theodore"
```

### [`last_name(opts \\ [])`](`NeoFaker.Person.last_name/1`)

```elixir
iex> NeoFaker.Person.last_name()
"Norris"

iex> NeoFaker.Person.last_name(type: :unisex)
"Harris"
```

### [`middle_name(opts \\ [])`](`NeoFaker.Person.middle_name/1`)

```elixir
iex> NeoFaker.Person.middle_name()
"Arden"

iex> NeoFaker.Person.middle_name(type: :feminine)
"Juliette"
```

### [`prefix()`](`NeoFaker.Person.prefix/0`)

```elixir
iex> NeoFaker.Person.prefix()
"Mr."
```

### [`non_binary_gender()`](`NeoFaker.Person.non_binary_gender/0`)

```elixir
iex> NeoFaker.Person.non_binary_gender()
"Agender"
```

### [`short_binary_gender()`](`NeoFaker.Person.short_binary_gender/0`)

```elixir
iex> NeoFaker.Person.short_binary_gender()
"M"
```

### [`suffix()`](`NeoFaker.Person.suffix/0`)

```elixir
iex> NeoFaker.Person.suffix()
"Jr."
```
